1. 이벤트 등록하기
- (1) 이벤트를 등록할 요소 가져오기 : let btn = document.querySelector('#myBtn');
- (2) 이벤트 함수 만들기 (이벤트 핸들러)
- (3) 이벤트 등록하기 : btn.addEventListener('이벤트', 함수이름);
  -> 이벤트 삭제하기 : btn.removeEventListener('이벤트', 함수이름);

2. 이벤트 객체 프로퍼티
- 이벤트 핸들러의 첫번째 파라미터에는 자동적으로 이벤트 객체가 전달됨
- 이벤트 객체는 이벤트 타입에 따라 갖고 있는 프로퍼티들이 다름
- type : 이벤트 이름 ('click', 'mouseup', 'keydown' 등)
- target : 이벤트가 발생한 요소
- currentTarget : 이벤트 핸들러가 등록된 요소

3. 이벤트 버블링 
- 부모요소의 이벤트까지 함께 일어나는 현상
- 이벤트 버블링이 일어나도 이벤트 객체의 target 프로퍼티는 변하지 않고 처음 이벤트가 발생한 시작점을 담고 있음
- 버블링을 멈추는 방법 : event.stopPropagation()
- 이벤트 위임 : 부모 요소에 이벤트를 하나 등록하면 모든 자식 요소의 이벤트를 다룰 수 있게 됨

4. 브라우저의 기본 동작
- 이벤트 객체의 preventDefault 메소드를 사용해 기본 동작을 방지할 수 있음
- HTML 태그가 가지고 있는 고유 역할과 의미를 훼손하게 될 수도 있기 때문에 꼭 필요한 경우에만 사용
